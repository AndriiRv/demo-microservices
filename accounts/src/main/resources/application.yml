server:
  port: 8080
spring:
  application:
    name: accounts
  profiles:
    active: prod
  config:
    import: optional:configserver:http://localhost:8071/
  cloud:
    openfeign:
      circuitbreaker:
        enabled: true
    function:
      definition: updateCommunication # method name from AccountsFunctions.java
    stream:
      default-binder: kafka # selected default Kafka broker for this app with usage of Spring Cloud Stream
      bindings:
        updateCommunication-in-0: # expect from external app to this app
          destination: send-message-as-long-from-message-microservice # it is selected name of queue (should be match with external app config Spring Cloud Stream)
          group: ${spring.application.name}
        sendCommunication-out-0:  # return from this app to external app
          destination: accounts-message-dto-from-accounts-microservice # it is selected name of exchange (should be match with external app config Spring Cloud Stream)
      kafka:
        binder:
          brokers:
            - localhost:9092

  rabbitmq:
    host: localhost
    port: 5672
    username: guest
    password: guest
    connection-timeout: 10s

  datasource:
    url: jdbc:mysql://localhost:3306/accountsdb
    username: root
    password: root
  jpa:
    show-sql: true
  sql:
    init:
      mode: always

resilience4j:
  circuitbreaker:
    configs:
      default:
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 2
        failureRateThreshold: 50
        waitDurationInOpenState: 10000
  retry:
    configs:
      default:
        maxAttempts: 3
        waitDuration: 100
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
  ratelimiter:
    configs:
      default:
        timeout-duration: 1000
        limit-refresh-period: 5000
        limit-for-period: 1

management:
  endpoints:
    web:
      exposure:
        include: "*"
  health:
    readiness-state:
      enabled: true
    liveness-state:
      enabled: true
  endpoint:
    shutdown:
      enabled: true
    health:
      probes:
        enabled: true
  info:
    env:
      enabled: true
  metrics:
    tags:
      application: ${spring.application.name}

endpoints:
  shutdown:
    enabled: true

eureka:
  instance:
    preferIpAddress: true
  client:
    fetchRegistry: true
    registerWithEureka: true
    serviceUrl:
      defaultZone: http://localhost:8070/eureka/

logging:
  level:
    com:
      eazybytes:
        accounts: DEBUG
  pattern:
    level: "%5p [${spring.application.name},%X{trace_id},%X{span_id}]"

info:
  app:
    name: accounts
    description: Eazy Bank Accounts Application
    version: "1.0.0"
