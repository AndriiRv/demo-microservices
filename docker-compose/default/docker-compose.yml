# To create all microservices without own Spring's logs: docker-compose up -d
# To start existing all microservices without own Spring's logs: docker-compose start -d

# To stop all microservices: docker-compose stop
# To stop and remove all microservices: docker-compose down

services:

# Hookdeck is need to set up auto trigger 'localhost' endpoint. More: github webhooks.
  hookdeck:
    image: hookdeck/hookdeck-cli:latest
    entrypoint: [ "/bin/sh","-c" ]
    stdin_open: true
    tty: true
    command:
# We need to run these two commands manually in EXEC in Docker hookdeck container
      - |
        hookdeck login --cli-key 4dd16gfai1ay12nkfuo62any7ymzr7i8cor0czbaabgyx4tupw
        hookdeck listen 8071 Source
# Next please input '/monitor' and after that 'configserver-container'
    extends:
      file: common-config.yml
      service: network-deploy-service

  rabbit:
    image: rabbitmq:3.12-management
    container_name: rabbit
    hostname: rabbitmq-spring-app
    ports:
      - 5672:5672
      - 15672:15672
    extends:
      file: common-config.yml
      service: microservice-base-config
    healthcheck:
      test: rabbitmq-diagnostics check_port_connectivity
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s

  redis-container:
    image: redis
    container_name: redis
    ports:
      - 6379:6379
    extends:
      file: common-config.yml
      service: network-deploy-service
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s

  configserver-container:
    image: kent0k/configserver:${DOCKER_IMAGE_TAG_VALUE}
    container_name: configserver-microservice
    ports:
      - 8071:8071
    extends:
      file: common-config.yml
      service: microservice-base-config
    deploy:
      resources:
        limits:
          memory: 700m
    volumes:
      - ssh-volume:/root/.ssh
    healthcheck:
      test: "curl --fail --silent localhost:8071/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    environment:
      OTEL_SERVICE_NAME: configserver
    depends_on:
      rabbit:
        condition: service_healthy

  gatewayserver-container:
    image: kent0k/gatewayserver:${DOCKER_IMAGE_TAG_VALUE}
    container_name: gatewayserver-microservice
    ports:
      - 8072:8072
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    deploy:
      resources:
        limits:
          memory: 500m
    environment:
      SPRING_APPLICATION_NAME: gatewayserver
      SPRING_DATA_REDIS_CONNECT-TIMEOUT: 2s
      SPRING_DATA_REDIS_HOST: redis-container
      SPRING_DATA_REDIS_PORT: 6379
      SPRING_DATA_REDIS_TIMEOUT: 1s
      OTEL_SERVICE_NAME: gatewayserver
      SPRING_SECURITY_OAUTH2_RESOURCESERVER_JWT_JWK-SET-URI: http://keycloak-container:8080/realms/master/protocol/openid-connect/certs
    depends_on:
      accounts:
        condition: service_healthy
      cards:
        condition: service_healthy
      loans:
        condition: service_healthy
      redis-container:
        condition: service_healthy

# Client Credentials grant type flow (without real user);
# Authorization Code grant type flow (with real user).
  keycloak-container:
    image: quay.io/keycloak/keycloak:22.0.1
    container_name: keycloak
    ports:
      - 7080:8080
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    command: "start-dev"
    extends:
      file: common-config.yml
      service: network-deploy-service

  accountsdb-container:
    container_name: accountsdb
    ports:
      - 3306:3306
    environment:
      MYSQL_DATABASE: accountsdb
    extends:
      file: common-config.yml
      service: microservice-db-config
  loansdb-container:
    container_name: loansdb
    ports:
      - 3307:3306
    environment:
      MYSQL_DATABASE: loansdb
    extends:
      file: common-config.yml
      service: microservice-db-config
  cardsdb-container:
    container_name: cardsdb
    ports:
      - 3308:3306
    environment:
      MYSQL_DATABASE: cardsdb
    extends:
      file: common-config.yml
      service: microservice-db-config

  accounts:
    image: kent0k/accounts:${DOCKER_IMAGE_TAG_VALUE}
    container_name: accounts-microservice
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: accounts
      SPRING_DATASOURCE_URL: jdbc:mysql://accountsdb-container:3306/accountsdb
      OTEL_SERVICE_NAME: accounts
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    healthcheck:
      test: "curl --fail --silent localhost:8080/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      accountsdb-container:
        condition: service_healthy

  loans:
    image: kent0k/loans:${DOCKER_IMAGE_TAG_VALUE}
    container_name: loans-microservice
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: loans
      SPRING_DATASOURCE_URL: jdbc:mysql://loansdb-container:3306/loansdb
      OTEL_SERVICE_NAME: loans
    healthcheck:
      test: "curl --fail --silent localhost:8090/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      loansdb-container:
        condition: service_healthy

  cards:
    image: kent0k/cards:${DOCKER_IMAGE_TAG_VALUE}
    container_name: cards-microservice
    extends:
      file: common-config.yml
      service: microservice-configserver-config
    environment:
      SPRING_APPLICATION_NAME: cards
      SPRING_DATASOURCE_URL: jdbc:mysql://cardsdb-container:3306/cardsdb
      OTEL_SERVICE_NAME: cards
    healthcheck:
      test: "curl --fail --silent localhost:9000/actuator/health/readiness | grep UP || exit 1"
      interval: 20s
      timeout: 5s
      retries: 20
      start_period: 10s
    depends_on:
      cardsdb-container:
        condition: service_healthy

  message-container:
    image: kent0k/message:${DOCKER_IMAGE_TAG_VALUE}
    container_name: message-microservice
    extends:
      file: common-config.yml
      service: network-deploy-service
    environment:
      SPRING_RABBITMQ_HOST: rabbitmq-spring-app
      SPRING_CLOUD_STREAM_KAFKA_BINDER_BROKERS: "kafka:9092"
    depends_on:
      rabbit:
        condition: service_healthy

networks:
  kent0kmicroservicesharednetwork:
    driver: bridge

volumes:
  ssh-volume:
    external: true
